name: build
on:
  schedule:
    - cron: "00 01 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-22.04
    if: always() && !cancelled()
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Generate image tags
        id: generate-image-tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          DATE="$(echo ${TIMESTAMP} | cut -d '-' -f 1)"
          echo "DATE=$DATE" >> $GITHUB_ENV
          BUILD_TAGS=( "latest" "${TIMESTAMP}" "${DATE}" )
          echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Define Image Metadata
        id: define-image-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository.name }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/cubt85iz/${{ github.repository.name }}/main/README.md
            org.opencontainers.image.title=${{ github.repository.name }}
            org.opencontainers.image.version=${{ env.DATE }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          context: ./
          image: ${{ github.repository.name }}
          tags: |
            ${{ steps.generate-image-tags.outputs.alias_tags }}
          labels: ${{ steps.define-image-metadata.outputs.labels }}
          oci: false

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Echo outputs
        #if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
